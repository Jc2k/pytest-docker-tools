name: CI

on:
  push:
    branches:
    - main
  pull_request: ~

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest

    steps:
    - name: Check out code from GitHub
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Install poetry
      shell: bash
      run: |
        python -m pip install -U pip poetry
        echo "$HOME/.poetry/bin:$PATH" >> $GITHUB_PATH

    - name: Configure poetry
      shell: bash
      run: poetry config virtualenvs.in-project true

    - name: Set up cache
      uses: actions/cache@v2
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

    - name: Install dependencies
      shell: bash
      run: poetry install

    - name: Run pyupgrade
      shell: bash
      run: poetry run find pytest_docker_tools tests -name '*.py' -exec python -m pyupgrade --py37-plus {} + && git diff --exit-code

    - name: Run isort
      shell: bash
      run: poetry run python -m isort -c --diff pytest_docker_tools tests

    - name: Run black
      shell: bash
      run: poetry run python -m black --check --diff pytest_docker_tools tests

    - name: Run flake8
      shell: bash
      run: poetry run python -m flake8 pytest_docker_tools tests

    - name: Run poetry build
      shell: bash
      run: poetry build

    - name: Run poetry check
      shell: bash
      run: poetry check

  tests:
    name: pytest/${{ matrix.os }}/${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest

    strategy:
      matrix:
        # os: [Ubuntu, MacOS, Windows]
        # Development primarily happens on macOS, it does work with Docker for Mac
        # Windows is not tested at all
        # Neither are currently an option on GitHub CI
        os: [Ubuntu]
        python-version: [3.7, 3.8]

    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}

    steps:
    - name: Check out code from GitHub
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Install poetry
      shell: bash
      run: |
        python -m pip install -U pip poetry
        echo "$HOME/.poetry/bin:$PATH" >> $GITHUB_PATH

    - name: Configure poetry
      shell: bash
      run: poetry config virtualenvs.in-project true

    - name: Set up cache
      uses: actions/cache@v2
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

    - name: Install dependencies
      shell: bash
      run: poetry install

    - name: Run pytest
      shell: bash
      run: poetry run coverage run -m pytest

    - name: Upload coverage to Codecov
      shell: bash
      run: poetry run codecov --flags unittests -e OS -e PYTHON --tries 20
